/** 
 * Writes a header to define signed and unsigned 32 and 64 bit types, 
 * as well as a ptr_size constant.
 * Will create the kilo::s32, kilo::s64, kilo::u32 and kilo::u64 types.
 */

// Copyright 2013 Aaron Moss
//
// This file is part of KiloMP.
//
// KiloMP is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published 
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// KiloMP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with KiloMP.  If not, see <https://www.gnu.org/licenses/>.

#include <iostream>
#include <fstream>

int main(int argc, char** argv) {
	using namespace std;
	
	ofstream out;
	out.open("fixed_width.hpp", ios::out | ios::trunc);
	
	if ( ! out.is_open() ) {
		cerr << "Could not open file." << endl;
		return 1;
	}
	
	out << "#pragma once\n" << endl;
	
	out << "/** Defines fixed width integer types.\n"
	    << " *  ==AUTOGENERATED HEADER FILE==\n"
	    << " *  Created by running fixed_width.cpp on the local system\n"
	    << " *  @author Aaron Moss\n"
	    << " */\n" << endl;
	
	out << "namespace kilo {\n" << endl;
	
	if ( sizeof(int) == 4 ) {
		out << "typedef signed int s32;" << endl;
		out << "typedef unsigned int u32;" << endl;
	} else if ( sizeof(short) == 4 ) {
		out << "typedef signed short s32;" << endl;
		out << "typedef unsigned short u32;" << endl;
	} else if ( sizeof(long) == 4 ) {
		out << "typedef signed long s32;" << endl;
		out << "typedef unsigned long u32;" << endl;
	} else {
		cerr << "ERROR: no 32-bit type" << endl;
	}
	
	if ( sizeof(long) == 8 ) {
		out << "typedef signed long s64;" << endl;
		out << "typedef unsigned long u64;" << endl;
	} else if ( sizeof(int) == 8 ) {
		out << "typedef signed int s64;" << endl;
		out << "typedef unsigned int u64;" << endl;
	} else if ( sizeof(long long) == 8 ) {
		out << "typedef signed long long s64;" << endl;
		out << "typedef unsigned long long u64;" << endl;
	} else {
		cerr << "ERROR: no 64-bit type" << endl;
	}
	
	out << "\n} /* namespace kilo */\n" << endl;
	
	out.close();
	
	return 0;
}
